/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao.windows;

import controle.ControleLogin;
import flex.db.GenericDAO;
import java.awt.Image;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import modelo.negocio.InventarioResumo;
import modelo.negocio.Perfil;
import modelo.negocio.Rota;
import modelo.negocio.Usuario;
import util.Cast;

/**
 *
 * @author Usuário
 */
public class GerenciarAnoRota extends javax.swing.JDialog {

    private boolean isAno = false;
    private java.awt.Frame parent;
    
    /**
     * Creates new form GerenciarAnoRota
     * @param parent
     * @param modal
     */
    public GerenciarAnoRota(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.parent = parent;
        
        Image image = new ImageIcon(getClass().getResource("/visao/images/cattle.png")).getImage();
        this.setIconImage(image);
        
        super.setLocationRelativeTo(null);
        super.setResizable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textoEntrada = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listDados = new javax.swing.JList<>();
        addAnoRotaBT = new javax.swing.JButton();
        removerAnoRotaBT = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        editAnoRotaBT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        textoEntrada.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        textoEntrada.setForeground(new java.awt.Color(0, 38, 255));
        textoEntrada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textoEntrada.setText("GERENCIAR ANO");

        listDados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listDados);

        addAnoRotaBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/images/add.png"))); // NOI18N
        addAnoRotaBT.setToolTipText("Adicionar");
        addAnoRotaBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnoRotaBTActionPerformed(evt);
            }
        });

        removerAnoRotaBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/images/delete.png"))); // NOI18N
        removerAnoRotaBT.setToolTipText("Remover/Editar");
        removerAnoRotaBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAnoRotaBTActionPerformed(evt);
            }
        });

        btnCancelar.setText("Voltar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        editAnoRotaBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/images/edit.png"))); // NOI18N
        editAnoRotaBT.setToolTipText("Editar Usuário.");
        editAnoRotaBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAnoRotaBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addAnoRotaBT, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editAnoRotaBT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerAnoRotaBT, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoEntrada)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(removerAnoRotaBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addAnoRotaBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(editAnoRotaBT))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addAnoRotaBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAnoRotaBTActionPerformed
        
        DefaultListModel listModel = (DefaultListModel) listDados.getModel();
        
        if( isAno ){
            SingleYearSelector telaNovoAno = new SingleYearSelector(this.parent, true);
            telaNovoAno.setTitle("SGPL - Adicionar novo ano");
            telaNovoAno.setVisible(true);
        
            String ano = telaNovoAno.getSelected();
            
            if (ano != null) { 
                int novoAno = Integer.parseInt(ano);
                
                if( anoJaCadastrado(novoAno) ){
                    return;
                }

                GenericDAO<InventarioResumo> irdao = new GenericDAO<>(InventarioResumo.class);
                GenericDAO<Perfil> daop = new GenericDAO<>(Perfil.class);
                List<Perfil> perfis = daop.retrieveAll();

                for(int i = 0; i < perfis.size(); i++){
                    InventarioResumo resumo = new InventarioResumo();
                    resumo.setIdPerfil(perfis.get(0).getId());
                    resumo.setAno(novoAno);                               
                    irdao.insert(resumo);
                }
                
                listModel.addElement(novoAno);
                
                if(!listDados.isEnabled()){
                    listModel.remove(0);
                    listDados.setEnabled(true);
                }
                
                listDados.setModel(listModel);
            }
        } else {
            String novaRota = JOptionPane.showInputDialog("Insira o nome da nova Rota: ");
            
            if (novaRota != null) { 
                Rota rota = new Rota(novaRota);

                GenericDAO<Rota> dao = new GenericDAO<>(Rota.class);
                dao.insert(rota);

                listModel.addElement(rota.getRota());

                if(!listDados.isEnabled()){
                    listModel.remove(0);
                    listDados.setEnabled(true);
                }
                
                listDados.setModel(listModel);
            }
        }
        
    }//GEN-LAST:event_addAnoRotaBTActionPerformed

    private void removerAnoRotaBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAnoRotaBTActionPerformed
        
        if(listDados.getSelectedIndex() != -1 ){
            DefaultListModel listModel = (DefaultListModel) listDados.getModel();

            if( isAno ){
                int anoSelecionado = Integer.parseInt(listDados.getSelectedValue());

                GenericDAO<InventarioResumo> irdao = new GenericDAO<>(InventarioResumo.class);

                List<InventarioResumo> listaAnos = irdao.executeSQL("" + 
                    "SELECT ano FROM inventario_terras        WHERE ano = " + anoSelecionado + " UNION " + 
                    "SELECT ano FROM inventario_forrageiras   WHERE ano = " + anoSelecionado + " UNION " +
                    "SELECT ano FROM inventario_maquinas      WHERE ano = " + anoSelecionado + " UNION " + 
                    "SELECT ano FROM inventario_benfeitorias  WHERE ano = " + anoSelecionado + " UNION " + 
                    "SELECT ano FROM inventario_animais       WHERE ano = " + anoSelecionado + " UNION " + 
                    "SELECT ano FROM dados_economicos_mensais WHERE ano = " + anoSelecionado + " UNION " +
                    "SELECT ano FROM dados_tecnicos_mensais   WHERE ano = " + anoSelecionado +
                    " ORDER BY ano");


                if( !listaAnos.isEmpty() ){
                    JOptionPane.showMessageDialog(null, "Existem dados cadastrados nesse ano. Altere antes de excluir.");
                } else {

                    int escolha = JOptionPane.showOptionDialog(null, "Deseja realmente excluir o ano " 
                        + anoSelecionado + " ?", "Exclusão de Ano", 
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] {"Sim", "Não"}, "Não");

                    if(escolha == 0)  {
                        irdao.executeSQL("DELETE FROM inventario_resumo WHERE ano = " + anoSelecionado);

                        listModel.removeElement("" + anoSelecionado);

                        if(listModel.isEmpty()){
                            listModel.addElement("Nenhum ano cadastrado");
                            listDados.setEnabled(false);
                        }
                        
                        listDados.setModel(listModel);
                    }
                }
                
            } else {
                String rotaSelecionada = listDados.getSelectedValue();

                GenericDAO<Rota> dao = new GenericDAO<>(Rota.class);
                GenericDAO<Perfil> daop = new GenericDAO<>(Perfil.class);

                int id = dao.executeSQL("SELECT idRota FROM rota AS r WHERE r.rota = '" + rotaSelecionada + "'" ).get(0).getId();

                List<Perfil> temp = daop.executeSQL("SELECT idPerfil FROM perfil WHERE idRotaFK = " + id);

                if( !temp.isEmpty() ){
                    JOptionPane.showMessageDialog(null, "Existem perfis cadastrados nessa rota. Altere antes de excluir.");
                } else {

                    int escolha = JOptionPane.showOptionDialog(null, "Deseja realmente excluir a rota " 
                        + rotaSelecionada.toUpperCase() + " ?", "Exclusão de Rota", 
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] {"Sim", "Não"}, "Não");

                    if(escolha == 0)  {
                        dao.remove(id);

                        listModel.removeElement(rotaSelecionada);

                        if(listModel.isEmpty()){
                            listModel.addElement("Nenhuma rota cadastrada");
                            listDados.setEnabled(false);
                        }
                        
                        listDados.setModel(listModel);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um item na lista antes de continuar!");
        }
    }//GEN-LAST:event_removerAnoRotaBTActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void editAnoRotaBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAnoRotaBTActionPerformed
        
        if(listDados.getSelectedIndex() != -1 ){
            DefaultListModel listModel = (DefaultListModel) listDados.getModel();
            
            if( isAno ){
                SingleYearSelector telaNovoAno = new SingleYearSelector(this.parent, true);
                telaNovoAno.setTitle("SGPL - Adicionar novo ano");
                telaNovoAno.setVisible(true);
        
                String ano = telaNovoAno.getSelected();
                
                if (ano != null) {

                    int novoAno = Integer.parseInt(ano);

                    if( anoJaCadastrado(novoAno) ){
                        return;
                    }
                    
                    int escolha = JOptionPane.showOptionDialog(null, "Deseja realmente trocar o ano " 
                            + listDados.getSelectedValue() + " pelo ano " + novoAno + "?", "Edição de Ano", 
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] {"Sim", "Não"}, "Não");

                    if(escolha == 0)  {

                        Usuario usuarioAtual = ControleLogin.getInstance().getUsuario();

                        String input = JOptionPane.showInputDialog(this, "O ano " + listDados.getSelectedValue() +  
                                " será editado para " + novoAno + ".\nDigite seu login para confirmação: ", 
                                "Confirmar Edição de Ano", JOptionPane.OK_CANCEL_OPTION);

                        if (usuarioAtual.getLogin().equals(input)) {

                            String anoTemp = listDados.getSelectedValue();
                            
                            GenericDAO<InventarioResumo> irdao = new GenericDAO<>(InventarioResumo.class);
                            List<InventarioResumo> resumos = irdao.retrieveByColumn("ano", Integer.parseInt(anoTemp));

                            for(int i = 0; i < resumos.size(); i++){
                                resumos.get(i).setAno(novoAno);                               
                                irdao.update(resumos.get(i));
                            }

                            listModel.removeElement(anoTemp);
                            listModel.addElement(novoAno);

                            listDados.setModel(listModel);


                        } else if (!usuarioAtual.getLogin().equals(input) && input != null){
                            JOptionPane.showMessageDialog(this, "Login Incorreto.", "Login inválido", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
                }
            } //else {
//                String novaRota = JOptionPane.showInputDialog("Insira a nova rota: ");
//                
//                if (novaRota != null) {
//
//                    //if( rotaJaCadastrado(novaRota) ){
//                    //    return;
//                    //}
//                    
//                    int escolha = JOptionPane.showOptionDialog(null, "Deseja realmente trocar a rota " 
//                            + listDados.getSelectedValue() + " pela rota " + novaRota + "?", "Edição de Rota", 
//                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] {"Sim", "Não"}, "Não");
//
//                    if(escolha == 0)  {
//
//                        Usuario usuarioAtual = ControleLogin.getInstance().getUsuario();
//
//                        String input = JOptionPane.showInputDialog(this, "A rota " + listDados.getSelectedValue() +  
//                                " será editada para " + novaRota + ".\nDigite seu login para confirmação: ", 
//                                "Confirmar Edição de Rota", JOptionPane.OK_CANCEL_OPTION);
//
//                        if (usuarioAtual.getLogin().equals(input)) {
//
//                            String rotaTemp = listDados.getSelectedValue();
//                            
//                            GenericDAO<Rota> rdao = new GenericDAO<>(Rota.class);
//                            List<Rota> rotas = rdao.retrieveByColumn("rota", rotaTemp);
//
//                            for(int i = 0; i < rotas.size(); i++){
//                                rotas.get(i).setRota(novaRota);                               
//                                rdao.update(rotas.get(i));
//                            }
//
//                            listModel.removeElement(rotaTemp);
//                            listModel.addElement(novaRota);
//
//                            listDados.setModel(listModel);
//
//
//                        } else if (!usuarioAtual.getLogin().equals(input) && input != null){
//                            JOptionPane.showMessageDialog(this, "Login Incorreto.", "Login inválido", JOptionPane.ERROR_MESSAGE);
//                        }
//                    }
//                    
//                }
//            }
            
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um item na lista antes de continuar!");
        }
               
    }//GEN-LAST:event_editAnoRotaBTActionPerformed
    
    public boolean isIsAno() {
        return isAno;
    }

    public void setIsAno(boolean isAno) {
        this.isAno = isAno;
    }

    public void prepararTela(){
                
        DefaultListModel listModel = new DefaultListModel();
        
        if( isAno ){
            
            super.setTitle("SGPL - Gerenciar Anos");
            textoEntrada.setText("GERENCIAR ANOS");
            
            GenericDAO<InventarioResumo> dao = new GenericDAO<>(InventarioResumo.class);
        
            List<InventarioResumo> listaAnos = dao.executeSQL("" + 
                    "SELECT ano FROM inventario_terras        UNION " + 
                    "SELECT ano FROM inventario_forrageiras   UNION " +
                    "SELECT ano FROM inventario_maquinas      UNION " + 
                    "SELECT ano FROM inventario_benfeitorias  UNION " + 
                    "SELECT ano FROM inventario_animais       UNION " + 
                    "SELECT ano FROM inventario_resumo        UNION " +
                    "SELECT ano FROM dados_economicos_mensais UNION " +
                    "SELECT ano FROM dados_tecnicos_mensais   " +
                    "ORDER BY ano");

            if (listaAnos.isEmpty()) {
                listModel.addElement("Nenhum ano cadastrado");
                listDados.setEnabled(false);
            }

            for(int i = listaAnos.size() - 1; i >= 0; i--) {
                listModel.addElement(Cast.toString(listaAnos.get(i).getAno()));
            }
                        
        } else {
            
            super.setTitle("SGPL - Gerenciar Rotas");
            textoEntrada.setText("GERENCIAR ROTAS");
            
            GenericDAO<Rota> dao = new GenericDAO<>(Rota.class);
            
            List<Rota> listaRotas = dao.retrieveAll();
            
            if (listaRotas.isEmpty()) {
                listModel.addElement("Nenhuma rota cadastrada");
                listDados.setEnabled(false);
            }

            for(int i = 0; i < listaRotas.size(); i++) {
                listModel.addElement(listaRotas.get(i).getRota());
            }
            
            editAnoRotaBT.setVisible(false);
        }
        
        listDados.setModel(listModel);
        
    }
    
    public boolean anoJaCadastrado(int novoAno){
        DefaultListModel listModel = (DefaultListModel) listDados.getModel();
        
        
        
        for(int i = 0; i < listModel.size(); i++){
            if(listModel.getElementAt(0).equals("Nenhum ano cadastrado")){
                continue;
            }
            
            if(novoAno == Integer.parseInt(listModel.getElementAt(i).toString())){
                JOptionPane.showMessageDialog(null, "Esse ano já está cadastrado no sistema!");
                return true;
            }
        }
        
        return false;
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAnoRotaBT;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton editAnoRotaBT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listDados;
    private javax.swing.JButton removerAnoRotaBT;
    private javax.swing.JLabel textoEntrada;
    // End of variables declaration//GEN-END:variables
}
